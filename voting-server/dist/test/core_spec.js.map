{"version":3,"sources":["../../test/core_spec.js"],"names":["describe","it","state","entries","nextState","to","equal","of","votingState","win","tied","final","voteCast","next"],"mappings":"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","file":"core_spec.js","sourcesContent":["/**\r\n * Created by Owner on 1/6/2017.\r\n */\r\nimport {expect} from 'chai';\r\nimport {List,Map} from 'immutable';\r\n\r\nimport {setEntries,next,vote} from '../src/core';\r\n\r\ndescribe(\"app logic\",()=> {\r\n    describe(\"set entries\", () => {\r\n        it(\"adds a new entry to the most recent state\", () => {\r\n            const state = Map();\r\n            const entries = [\"Requiem for a Dream\", \"Gangs of NY\"];\r\n            const nextState = setEntries(state, entries);\r\n            expect(nextState).to.equal(Map({\r\n                entries: List.of(\"Requiem for a Dream\", \"Gangs of NY\")\r\n            }));\r\n        });\r\n    });\r\n\r\n    describe(\"next state\", () => {\r\n        it(\"produces the next state with a voting pair from entries\", () => {\r\n            const state = Map({\r\n                \"entries\": List.of(\"Sunshine\", \"The Dark Knight\", \"There Will Be Blood\")\r\n            });\r\n            const votingState = next(state);\r\n            expect(votingState).to.equal(Map({\r\n                \"entries\": List.of(\"There Will Be Blood\"),\r\n                \"vote\": Map({\"pair\": List.of(\"Sunshine\", \"The Dark Knight\")}),\r\n            }));\r\n        });\r\n\r\n        it(\"it adds winner of vote back into entries\", () => {\r\n            const state = Map({\r\n                \"vote\": Map({\r\n                    \"pair\": List.of(\"The Wire\", \"Fargo\"),\r\n                    \"tally\": Map({\r\n                        \"The Wire\": 4,\r\n                        \"Fargo\": 2\r\n                    })\r\n                }),\r\n                \"entries\": List.of(\"Nothing1\", \"Nothing2\")\r\n            });\r\n\r\n            const win = next(state);\r\n            expect(win).to.equal(Map({\r\n                \"vote\": Map({\r\n                    \"pair\": List.of(\"Nothing1\", \"Nothing2\")\r\n                }),\r\n                \"entries\": List.of(\"The Wire\")\r\n            }));\r\n        });\r\n\r\n        it(\"adds the tied pair back into entries\",()=>{\r\n            const state = Map({\r\n                \"vote\":Map({\r\n                    \"pair\":List.of(\"Bourne Ultimatum\",\"The Martian\"),\r\n                    \"tally\":Map({\r\n                        \"Bourne Ultimatum\":3,\r\n                        \"The Martian\":3\r\n                    })\r\n                }),\r\n                \"entries\":List.of(\"Good Will Hunting\",\"The Town\",\"The Departed\")\r\n            });\r\n\r\n            const tied = next(state);\r\n            expect(tied).to.equal(Map({\r\n                \"entries\":List.of(\"The Departed\",\"Bourne Ultimatum\",\"The Martian\"),\r\n                \"vote\":Map({\r\n                    \"pair\":List.of(\"Good Will Hunting\",\"The Town\")\r\n                })\r\n            }));\r\n        });\r\n\r\n        it(\"ends voting and declares the winner when 1 entry is left\",()=>{\r\n           const state = Map({\r\n               \"vote\":Map({\r\n                   \"pair\":List.of(\"The One\",\"Ong Bak\"),\r\n                   \"tally\":Map({\r\n                       \"The One\":2,\r\n                       \"Ong Bak\":4\r\n                   })\r\n               }),\r\n               \"entries\":List.of()\r\n           });\r\n           const final = next(state);\r\n           expect(final).to.equal(Map({\r\n               \"winner\":\"Ong Bak\"\r\n           }))\r\n        });\r\n    });\r\n\r\n    describe(\"tally votes for a pair of entries\", () => {\r\n        it(\"creates the first vote for a vote pair\", () => {\r\n            const state = Map({\"pair\": List.of(\"King Kong\", \"No Country for Old Men\")});\r\n            const voteCast = vote(state, \"No Country for Old Men\");\r\n            expect(voteCast).to.equal(Map({\r\n                    \"pair\": List.of(\"King Kong\", \"No Country for Old Men\"),\r\n                    \"tally\": Map({\r\n                        \"No Country for Old Men\": 1\r\n                    })\r\n            }));\r\n        });\r\n\r\n        it(\"adds a vote\", () => {\r\n            const state = Map({\r\n                    \"pair\": List.of(\"The Wire\", \"Fargo\"),\r\n                    \"tally\": Map({\r\n                        \"The Wire\": 4,\r\n                        \"Fargo\": 2\r\n                    })\r\n            });\r\n\r\n            const next = vote(state, \"Fargo\");\r\n            expect(next).to.equal(Map({\r\n                    \"pair\": List.of(\"The Wire\", \"Fargo\"),\r\n                    \"tally\": Map({\r\n                        \"The Wire\": 4,\r\n                        \"Fargo\": 3\r\n                    })\r\n            }));\r\n\r\n        });\r\n    });\r\n\r\n});\r\n\r\n\r\n"]}